trigger:
  branches:
    include:
      - release/miniclient/v*
      - refs/release/miniclient/v*

pool:
  vmImage: "ubuntu-latest"

variables:
  azureDevServiceConnection: "azure-rm-andaha-dev-connection"
  azureProdServiceConnection: "azure-rm-andaha-prod-connection"
  containerRegistryConnection: "andaha-container-reg-connection"
  bicepTemplateFile: "src/WebApps/MiniClient/pipeline/bicep/miniclient-main.bicep"
  nodeModulesCachePath: $(System.DefaultWorkingDirectory)/src/WebApps/MiniClient/Andaha.WebApps.MiniClient/node_modules

name: "$(Build.SourceBranchName)"

stages:
- stage: build
  displayName: Build
  jobs:
    - job: build
      steps:
      - task: Cache@2
        displayName: "cache npm packages"
        inputs:
          key: 'npm | "$(Agent.OS)" | src/WebApps/MiniClient/Andaha.WebApps.MiniClient/package-lock.json'
          restoreKeys: 'npm | "$(Agent.OS)"'
          path: "$(nodeModulesCachePath)"
          cacheHitVar: CACHE_RESTORED

      - task: Npm@1
        displayName: "install typescript"
        inputs:
          command: custom
          verbose: false
          customCommand: "install -D typescript"

      - task: Npm@1
        displayName: "npm install"
        condition: ne(variables.CACHE_RESTORED, 'true')
        inputs:
          command: custom
          workingDir: src/WebApps/MiniClient/Andaha.WebApps.MiniClient
          verbose: false
          customCommand: ci

      - task: Npm@1
        displayName: "npm build"
        inputs:
          command: custom
          workingDir: src/WebApps/MiniClient/Andaha.WebApps.MiniClient
          verbose: false
          customCommand: run build:prod

      - task: CopyFiles@2
        displayName: "Add binaries to Staging Directory"
        inputs:
          SourceFolder: src/WebApps/MiniClient/Andaha.WebApps.MiniClient/dist/andaha.web-apps.mini-client/
          TargetFolder: "$(Build.ArtifactStagingDirectory)/"

      - task: PublishBuildArtifacts@1
        displayName: "Publish Artifact"    

- stage: deploy_dev
  displayName: Deploy to dev
  dependsOn: build
  variables:
  - group: Development
  jobs:
  - job: deployment
    steps:
    - task: DownloadPipelineArtifact@2
      displayName: 'Downloading artifact'
      inputs:
        buildType: 'current'
        artifact: drop
        targetPath: '$(System.ArtifactsDirectory)/drop'

    - task: AzureStaticWebApp@0
      inputs:
        app_location: drop # (Optional) File path. Directory location of the application source code relative to working directory
        skip_app_build: true # (Optional) Skips Oryx build for app folder.
        azure_static_web_apps_api_token: $(miniClientWebAppDeploymentToken) # (Optional) Api token for deployment. Not required if passed as an environment variable.
        workingDirectory: $(System.ArtifactsDirectory)

    - task: AzureCLI@2
      displayName: 'Infrastructure provisioning'
      inputs:
        azureSubscription: $(azureDevServiceConnection)
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          az deployment group create --resource-group andaha-dev --template-file $(bicepTemplateFile) --parameters stage="dev"

    - task: AzureCLI@2
      displayName: Set appsetting variables
      inputs:
        azureSubscription: $(azureDevServiceConnection)
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          echo "az deployment group show --resource-group andaha-dev --name miniclient-main"
          deploymentoutputs=$(az deployment group show --resource-group andaha-dev --name miniclient-main --query properties.outputs)
          echo $deploymentoutputs | jq -c '. | to_entries[] | [.key, .value.value]' |
            while IFS=$"\n" read -r c; do
              outputname=$(echo "$c" | jq -r '.[0]')
              outputvalue=$(echo "$c" | jq -r '.[1]')
              echo "Set variable $outputname=$outputvalue"
              echo "##vso[task.setvariable variable=$outputname]$outputvalue"
          done

    - task: AzureCLI@1
      displayName: 'Delete app from Blobstorage'
      inputs:
        azureSubscription: $(azureDevServiceConnection)
        scriptLocation: inlineScript
        inlineScript: |
          az storage blob delete-batch --source '$web' --account-name $(storageAccountName)

    - task: replacetokens@3
      displayName: 'App environment substitution'
      inputs:
        targetFiles: '$(System.ArtifactsDirectory)/drop/*.js'
        encoding: 'auto'
        writeBOM: true
        actionOnMissing: 'warn'
        keepToken: true
        tokenPrefix: '#{'
        tokenSuffix: '}#'
        enableTransforms: false
        enableTelemetry: true

    - task: AzureCLI@1
      displayName: 'Copy Frontend to Blobstorage'
      inputs:
        azureSubscription: $(azureDevServiceConnection)
        scriptLocation: inlineScript
        inlineScript: |
          az storage blob upload-batch --destination '$web' --account-name $(storageAccountName) --source '$(System.ArtifactsDirectory)/drop'

- stage: deploy_prod
  displayName: Deploy to prod
  dependsOn: deploy_dev
  condition: succeeded()
  variables:
  - group: Production
  jobs:
  - deployment: deploy_prod
    displayName: Approval for prod
    environment: Production
  - job: deployment
    steps:
    - task: DownloadPipelineArtifact@2
      displayName: 'Downloading artifact'
      inputs:
        buildType: 'current'
        artifact: drop
        targetPath: '$(System.ArtifactsDirectory)/drop'

    - task: AzureCLI@2
      displayName: 'Infrastructure provisioning'
      inputs:
        azureSubscription: $(azureProdServiceConnection)
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          az deployment group create --resource-group andaha-prod --template-file $(bicepTemplateFile) --parameters stage="prod"

    - task: AzureCLI@2
      displayName: Set appsetting variables
      inputs:
        azureSubscription: $(azureProdServiceConnection)
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          echo "az deployment group show --resource-group andaha-prod --name miniclient-main"
          deploymentoutputs=$(az deployment group show --resource-group andaha-prod --name miniclient-main --query properties.outputs)
          echo $deploymentoutputs | jq -c '. | to_entries[] | [.key, .value.value]' |
            while IFS=$"\n" read -r c; do
              outputname=$(echo "$c" | jq -r '.[0]')
              outputvalue=$(echo "$c" | jq -r '.[1]')
              echo "Set variable $outputname=$outputvalue"
              echo "##vso[task.setvariable variable=$outputname]$outputvalue"
          done

    - task: AzureCLI@1
      displayName: 'Delete app from Blobstorage'
      inputs:
        azureSubscription: $(azureProdServiceConnection)
        scriptLocation: inlineScript
        inlineScript: |
          az storage blob delete-batch --source '$web' --account-name $(storageAccountName)

    - task: replacetokens@3
      displayName: 'App environment substitution'
      inputs:
        targetFiles: '$(System.ArtifactsDirectory)/drop/*.js'
        encoding: 'auto'
        writeBOM: true
        actionOnMissing: 'warn'
        keepToken: true
        tokenPrefix: '#{'
        tokenSuffix: '}#'
        enableTransforms: false
        enableTelemetry: true

    - task: AzureCLI@1
      displayName: 'Copy Frontend to Blobstorage'
      inputs:
        azureSubscription: $(azureProdServiceConnection)
        scriptLocation: inlineScript
        inlineScript: |
          az storage blob upload-batch --destination '$web' --account-name $(storageAccountName) --source '$(System.ArtifactsDirectory)/drop'
